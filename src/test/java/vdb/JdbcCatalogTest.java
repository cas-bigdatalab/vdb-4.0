package vdb;

import java.io.PrintWriter;
import java.sql.*;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.Executor;

import javax.sql.DataSource;

import junit.framework.TestCase;
import oracle.jdbc.driver.OracleDriver;

import org.apache.commons.dbcp.BasicDataSource;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;

import cn.csdb.commons.sql.JdbcManager;
import cn.csdb.commons.sql.JdbcSource;
import cn.csdb.commons.sql.catalog.JdbcColumn;
import cn.csdb.commons.sql.catalog.JdbcTable;

public class JdbcCatalogTest extends TestCase
{
	class StatementProxy implements Statement
	{
		Statement _statement;

		ConnectionProxy _connectionProxy;

		public StatementProxy(ConnectionProxy connectionProxy,
				Statement statement)
		{
			super();
			StatementProxy old = connectionProxy.getStatement();
			if (old != null)
			{
				System.err.println(old + " is not closed!");
			}

			_connectionProxy = connectionProxy;
			_statement = statement;
			connectionProxy.setStatement(this);
			System.out.println("create new statement: " + this);
		}

		public void addBatch(String sql) throws SQLException
		{
			_statement.addBatch(sql);
		}

		public void cancel() throws SQLException
		{
			_statement.cancel();
		}

		public void clearBatch() throws SQLException
		{
			_statement.clearBatch();
		}

		public void clearWarnings() throws SQLException
		{
			_statement.clearWarnings();
		}

		public void close() throws SQLException
		{
			_statement.close();
			System.out.println("close statement: " + this);
			_connectionProxy.setStatement(null);
		}

		public boolean execute(String sql, int autoGeneratedKeys)
				throws SQLException
		{
			return _statement.execute(sql, autoGeneratedKeys);
		}

		public boolean execute(String sql, int[] columnIndexes)
				throws SQLException
		{
			return _statement.execute(sql, columnIndexes);
		}

		public boolean execute(String sql, String[] columnNames)
				throws SQLException
		{
			return _statement.execute(sql, columnNames);
		}

		public boolean execute(String sql) throws SQLException
		{
			return _statement.execute(sql);
		}

		public int[] executeBatch() throws SQLException
		{
			return _statement.executeBatch();
		}

		public ResultSet executeQuery(String sql) throws SQLException
		{
			return _statement.executeQuery(sql);
		}

		public int executeUpdate(String sql, int autoGeneratedKeys)
				throws SQLException
		{
			return _statement.executeUpdate(sql, autoGeneratedKeys);
		}

		public int executeUpdate(String sql, int[] columnIndexes)
				throws SQLException
		{
			return _statement.executeUpdate(sql, columnIndexes);
		}

		public int executeUpdate(String sql, String[] columnNames)
				throws SQLException
		{
			return _statement.executeUpdate(sql, columnNames);
		}

		public int executeUpdate(String sql) throws SQLException
		{
			return _statement.executeUpdate(sql);
		}

		public Connection getConnection() throws SQLException
		{
			return _statement.getConnection();
		}

		public int getFetchDirection() throws SQLException
		{
			return _statement.getFetchDirection();
		}

		public int getFetchSize() throws SQLException
		{
			return _statement.getFetchSize();
		}

		public ResultSet getGeneratedKeys() throws SQLException
		{
			return _statement.getGeneratedKeys();
		}

		public int getMaxFieldSize() throws SQLException
		{
			return _statement.getMaxFieldSize();
		}

		public int getMaxRows() throws SQLException
		{
			return _statement.getMaxRows();
		}

		public boolean getMoreResults() throws SQLException
		{
			return _statement.getMoreResults();
		}

		public boolean getMoreResults(int current) throws SQLException
		{
			return _statement.getMoreResults(current);
		}

		public int getQueryTimeout() throws SQLException
		{
			return _statement.getQueryTimeout();
		}

		public ResultSet getResultSet() throws SQLException
		{
			return _statement.getResultSet();
		}

		public int getResultSetConcurrency() throws SQLException
		{
			return _statement.getResultSetConcurrency();
		}

		public int getResultSetHoldability() throws SQLException
		{
			return _statement.getResultSetHoldability();
		}

		public boolean isClosed() throws SQLException {
			return _statement.isClosed();
		}

		public void setPoolable(boolean poolable) throws SQLException {
			_statement.setPoolable(poolable);
		}

		public boolean isPoolable() throws SQLException {
			return _statement.isPoolable();
		}

		public void closeOnCompletion() throws SQLException {
			_statement.closeOnCompletion();
		}

		public boolean isCloseOnCompletion() throws SQLException {
			return _statement.isCloseOnCompletion();
		}

		public long getLargeUpdateCount() throws SQLException {
			return _statement.getLargeUpdateCount();
		}

		public void setLargeMaxRows(long max) throws SQLException {
			_statement.setLargeMaxRows(max);
		}

		public long getLargeMaxRows() throws SQLException {
			return _statement.getLargeMaxRows();
		}

		public long[] executeLargeBatch() throws SQLException {
			return _statement.executeLargeBatch();
		}

		public long executeLargeUpdate(String sql) throws SQLException {
			return _statement.executeLargeUpdate(sql);
		}

		public long executeLargeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
			return _statement.executeLargeUpdate(sql, autoGeneratedKeys);
		}

		public long executeLargeUpdate(String sql, int[] columnIndexes) throws SQLException {
			return _statement.executeLargeUpdate(sql, columnIndexes);
		}

		public long executeLargeUpdate(String sql, String[] columnNames) throws SQLException {
			return _statement.executeLargeUpdate(sql, columnNames);
		}

		public <T> T unwrap(Class<T> iface) throws SQLException {
			return _statement.unwrap(iface);
		}

		public boolean isWrapperFor(Class<?> iface) throws SQLException {
			return _statement.isWrapperFor(iface);
		}

		public int getResultSetType() throws SQLException
		{
			return _statement.getResultSetType();
		}

		public int getUpdateCount() throws SQLException
		{
			return _statement.getUpdateCount();
		}

		public SQLWarning getWarnings() throws SQLException
		{
			return _statement.getWarnings();
		}

		public void setCursorName(String name) throws SQLException
		{
			_statement.setCursorName(name);
		}

		public void setEscapeProcessing(boolean enable) throws SQLException
		{
			_statement.setEscapeProcessing(enable);
		}

		public void setFetchDirection(int direction) throws SQLException
		{
			_statement.setFetchDirection(direction);
		}

		public void setFetchSize(int rows) throws SQLException
		{
			_statement.setFetchSize(rows);
		}

		public void setMaxFieldSize(int max) throws SQLException
		{
			_statement.setMaxFieldSize(max);
		}

		public void setMaxRows(int max) throws SQLException
		{
			_statement.setMaxRows(max);
		}

		public void setQueryTimeout(int seconds) throws SQLException
		{
			_statement.setQueryTimeout(seconds);
		}
	}

	class ConnectionProxy implements Connection
	{
		Connection _connection;
		StatementProxy _statement = null;

		private PreparedStatement _preparedStatement;

		public ConnectionProxy(Connection connection)
		{
			super();
			_connection = connection;
		}

		public void clearWarnings() throws SQLException
		{
			_connection.clearWarnings();
		}

		public void close() throws SQLException
		{
			_connection.close();
		}

		public void commit() throws SQLException
		{
			_connection.commit();
		}

		public Statement createStatement() throws SQLException
		{
			return new StatementProxy(this, _connection.createStatement());
		}

		public Statement createStatement(int resultSetType,
				int resultSetConcurrency, int resultSetHoldability)
				throws SQLException
		{
			return new StatementProxy(this, _connection.createStatement(
					resultSetType, resultSetConcurrency, resultSetHoldability));
		}

		public Statement createStatement(int resultSetType,
				int resultSetConcurrency) throws SQLException
		{
			return new StatementProxy(this, _connection.createStatement(
					resultSetType, resultSetConcurrency));
		}

		public boolean getAutoCommit() throws SQLException
		{
			return _connection.getAutoCommit();
		}

		public String getCatalog() throws SQLException
		{
			return _connection.getCatalog();
		}

		public int getHoldability() throws SQLException
		{
			return _connection.getHoldability();
		}

		public DatabaseMetaData getMetaData() throws SQLException
		{
			return _connection.getMetaData();
		}

		public int getTransactionIsolation() throws SQLException
		{
			return _connection.getTransactionIsolation();
		}

		public Map<String, Class<?>> getTypeMap() throws SQLException
		{
			return _connection.getTypeMap();
		}

		public SQLWarning getWarnings() throws SQLException
		{
			return _connection.getWarnings();
		}

		public boolean isClosed() throws SQLException
		{
			return _connection.isClosed();
		}

		public boolean isReadOnly() throws SQLException
		{
			return _connection.isReadOnly();
		}

		public String nativeSQL(String sql) throws SQLException
		{
			return _connection.nativeSQL(sql);
		}

		public CallableStatement prepareCall(String sql, int resultSetType,
				int resultSetConcurrency, int resultSetHoldability)
				throws SQLException
		{
			return _connection.prepareCall(sql, resultSetType,
					resultSetConcurrency, resultSetHoldability);
		}

		public CallableStatement prepareCall(String sql, int resultSetType,
				int resultSetConcurrency) throws SQLException
		{
			return _connection.prepareCall(sql, resultSetType,
					resultSetConcurrency);
		}

		public CallableStatement prepareCall(String sql) throws SQLException
		{
			return _connection.prepareCall(sql);
		}

		public PreparedStatement prepareStatement(String sql,
				int resultSetType, int resultSetConcurrency,
				int resultSetHoldability) throws SQLException
		{
			_preparedStatement = _connection.prepareStatement(sql,
					resultSetType, resultSetConcurrency, resultSetHoldability);
			return _preparedStatement;
		}

		public PreparedStatement prepareStatement(String sql,
				int resultSetType, int resultSetConcurrency)
				throws SQLException
		{
			_preparedStatement = _connection.prepareStatement(sql,
					resultSetType, resultSetConcurrency);
			return _preparedStatement;
		}

		public PreparedStatement prepareStatement(String sql,
				int autoGeneratedKeys) throws SQLException
		{
			_preparedStatement = _connection.prepareStatement(sql,
					autoGeneratedKeys);
			return _preparedStatement;
		}

		public PreparedStatement prepareStatement(String sql,
				int[] columnIndexes) throws SQLException
		{
			_preparedStatement = _connection.prepareStatement(sql,
					columnIndexes);
			return _preparedStatement;
		}

		public PreparedStatement prepareStatement(String sql,
				String[] columnNames) throws SQLException
		{
			_preparedStatement = _connection.prepareStatement(sql, columnNames);
			return _preparedStatement;
		}

		public Clob createClob() throws SQLException {
			return _connection.createClob();
		}

		public Blob createBlob() throws SQLException {
			return _connection.createBlob();
		}

		public NClob createNClob() throws SQLException {
			return _connection.createNClob();
		}

		public SQLXML createSQLXML() throws SQLException {
			return _connection.createSQLXML();
		}

		public boolean isValid(int timeout) throws SQLException {
			return _connection.isValid(timeout);
		}

		public void setClientInfo(String name, String value) throws SQLClientInfoException {
			_connection.setClientInfo(name, value);
		}

		public void setClientInfo(Properties properties) throws SQLClientInfoException {
			_connection.setClientInfo(properties);
		}

		public String getClientInfo(String name) throws SQLException {
			return _connection.getClientInfo(name);
		}

		public Properties getClientInfo() throws SQLException {
			return _connection.getClientInfo();
		}

		public Array createArrayOf(String typeName, Object[] elements) throws SQLException {
			return _connection.createArrayOf(typeName, elements);
		}

		public Struct createStruct(String typeName, Object[] attributes) throws SQLException {
			return _connection.createStruct(typeName, attributes);
		}

		public void setSchema(String schema) throws SQLException {
			_connection.setSchema(schema);
		}

		public String getSchema() throws SQLException {
			return _connection.getSchema();
		}

		public void abort(Executor executor) throws SQLException {
			_connection.abort(executor);
		}

		public void setNetworkTimeout(Executor executor, int milliseconds) throws SQLException {
			_connection.setNetworkTimeout(executor, milliseconds);
		}

		public int getNetworkTimeout() throws SQLException {
			return _connection.getNetworkTimeout();
		}

		public <T> T unwrap(Class<T> iface) throws SQLException {
			return _connection.unwrap(iface);
		}

		public boolean isWrapperFor(Class<?> iface) throws SQLException {
			return _connection.isWrapperFor(iface);
		}

		public PreparedStatement prepareStatement(String sql)
				throws SQLException
		{
			_preparedStatement = _connection.prepareStatement(sql);
			return _preparedStatement;
		}

		public void releaseSavepoint(Savepoint savepoint) throws SQLException
		{
			_connection.releaseSavepoint(savepoint);
		}

		public void rollback() throws SQLException
		{
			_connection.rollback();
		}

		public void rollback(Savepoint savepoint) throws SQLException
		{
			_connection.rollback(savepoint);
		}

		public void setAutoCommit(boolean autoCommit) throws SQLException
		{
			_connection.setAutoCommit(autoCommit);
		}

		public void setCatalog(String catalog) throws SQLException
		{
			_connection.setCatalog(catalog);
		}

		public void setHoldability(int holdability) throws SQLException
		{
			_connection.setHoldability(holdability);
		}

		public void setReadOnly(boolean readOnly) throws SQLException
		{
			_connection.setReadOnly(readOnly);
		}

		public Savepoint setSavepoint() throws SQLException
		{
			return _connection.setSavepoint();
		}

		public Savepoint setSavepoint(String name) throws SQLException
		{
			return _connection.setSavepoint(name);
		}

		public void setTransactionIsolation(int level) throws SQLException
		{
			_connection.setTransactionIsolation(level);
		}

		public void setTypeMap(Map<String, Class<?>> arg0) throws SQLException
		{
			_connection.setTypeMap(arg0);
		}

		public StatementProxy getStatement()
		{
			return _statement;
		}

		public void setStatement(StatementProxy statement)
		{
			_statement = statement;
		}
	}

	class DataSourceProxy implements DataSource
	{
		DataSource _dataSource;

		public DataSourceProxy(DataSource dataSource)
		{
			super();
			_dataSource = dataSource;
		}

		public Connection getConnection() throws SQLException
		{
			return new ConnectionProxy(_dataSource.getConnection());
		}

		public Connection getConnection(String username, String password)
				throws SQLException
		{
			return new ConnectionProxy(_dataSource.getConnection(username,
					password));
		}

		public int getLoginTimeout() throws SQLException
		{
			return _dataSource.getLoginTimeout();
		}

		public java.util.logging.Logger getParentLogger() throws SQLFeatureNotSupportedException {
			return _dataSource.getParentLogger();
		}

		public PrintWriter getLogWriter() throws SQLException
		{
			return _dataSource.getLogWriter();
		}

		public void setLoginTimeout(int seconds) throws SQLException
		{
			_dataSource.setLoginTimeout(seconds);
		}

		public void setLogWriter(PrintWriter out) throws SQLException
		{
			_dataSource.setLogWriter(out);
		}

		public boolean isWrapperFor(Class<?> iface) throws SQLException
		{

			return false;
		}

		public <T> T unwrap(Class<T> iface) throws SQLException
		{

			return null;
		}

	}

	JdbcSource _jdbcSource;

	public JdbcCatalogTest() throws Exception
	{
		BasicDataSource ds = new BasicDataSource();
		ds.setDriverClassName(OracleDriver.class.getName());
		ds.setUrl("jdbc:oracle:thin:@192.168.23.2:1521:csdb1");
		ds.setUsername("vdbtesttemp");
		ds.setPassword("vdbtesttemp");

		Logger.getRootLogger().setLevel(Level.ALL);
		_jdbcSource = JdbcManager.getInstance().getJdbcSource(
				new DataSourceProxy(ds));
	}

	protected void setUp() throws Exception
	{
		super.setUp();
	}

	protected void tearDown() throws Exception
	{
		super.tearDown();
	}

	public void testGetCatalog()
	{
		for (JdbcTable table : _jdbcSource.getJdbcCatalog().getDatabase()
				.getTables())
		{
			System.out.println("============" + table.getTableName()
					+ "============");
			for (JdbcColumn column : table.getColumns())
			{
				System.out.println(column.getColumnName());
			}
		}
	}
}
